import os
import sys
import pwd
import types
import atexit
import syslog
import site
import platform
import time
import datetime

pyversion="%s.%s" % platform.python_version_tuple()[:2]
start_time = datetime.datetime.now()

def in_prefix(file):
    for s in site.PREFIXES:
        if len(os.path.commonprefix([file, s])) > 1:
            return True
    return False

def imports():
    #for name, val in globals().items():
    for name, val in sys.modules.items():
        if isinstance(val, types.ModuleType) and name != 'sitecustomize' and '.' not in name:
            if hasattr(val,'__file__'):
                if in_prefix(val.__file__):
                    if  'site-packages' in val.__file__:
                        yield (val.__name__, val.__file__)
                else:
                    yield (val.__name__, val.__file__)

def get_username():
    uid = os.getuid();
    try:
        return pwd.getpwuid(uid).pw_name
    except KeyError:
        return str(uid)

def log_imports():
    import fcntl
    global pyversion
    global start_time
    modulename= "BWPY"
    try:
        with open("@GENTOO_EPREFIX@/.version","r") as bwpyversionfile:
            bwpyversion = bwpyversionfile.readline().strip()
            modulename = "BWPY %s" % bwpyversion 
            if 'BWPY_MPI_VERSION' in os.environ:
                modulename = "BWPY-MPI %s" % bwpyversion
    except:
        if 'BWPY_MPI_VERSION' in os.environ:
            modulename = "BWPY-MPI %s"
    impts = imports()
    if impts is None:
        impts = []
    end_time = datetime.datetime.now()
    duration = (end_time-start_time).total_seconds()
    with open("@GENTOO_EPREFIX@/var/log/bwpy/%s%s.log" % (platform.python_implementation(), pyversion), 'a') as log:
        import json
        fcntl.flock(log.fileno(), fcntl.LOCK_EX)
        if not hasattr(sys, 'argv'):
            sys.argv  = []
        log.write(json.dumps({ "start_time" : start_time.strftime('%Y-%m-%d %H:%M:%S'),
                    "end_time" : end_time.strftime('%Y-%m-%d %H:%M:%S'),
                    "modulename" : modulename,
                    "submodules" : list(filter(None, os.environ.get('BWPY_SUBMODULES','').split(':'))),
                    "pid" : os.getpid(),
                    "username" : get_username(),
                    "jobid" : os.environ.get('PBS_JOBID',''),
                    "nodes" : int(os.environ.get('PBS_NUM_NODES',0)),
                    "ppn" : int(os.environ.get('PBS_NUM_PPN',0)),
                    "duration" : duration,
                    "kernel" : platform.uname()[2],
                    "gpu" : os.path.exists('/dev/nvidiactl'),
                    "argv" : sys.argv,
                    "modules" : list(impts)}) + "\n")

def master_log_imports():
    if 'ALPS_APP_PE' in os.environ:
        if int(os.environ['ALPS_APP_PE']) is 0:
            log_imports()
    else:
        log_imports()

atexit.register(master_log_imports)

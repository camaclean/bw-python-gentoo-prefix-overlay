diff --git a/ATenConfig.cmake.in b/ATenConfig.cmake.in
index e69de29..fa2d854 100644
--- a/ATenConfig.cmake.in
+++ b/ATenConfig.cmake.in
@@ -0,0 +1,14 @@
+# Find the ATen includes and library
+#
+# AT_INCLUDE_DIR -- where to find the includes
+# AT_LIBRARIES -- list of libraries to link against
+# AT_FOUND -- set to 1 if found
+
+SET(AT_FOUND 1)
+SET(THNN_INCLUDE_DIR "@AT_INCLUDE_DIR@")
+
+if(NOT TARGET ATen AND NOT ATen_BINARY_DIR)
+   include("${CMAKE_INSTALL_PREFIX}/${AT_INSTALL_CMAKE_SUBDIR}/ATenTargets.cmake")
+endif()
+
+SET(THCS_LIBRARIES ATen)
diff --git a/CMakeLists.txt b/CMakeLists.txt
index ac568bf..5b92012 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,6 +1,7 @@
 
 CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
 SET(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake ${CMAKE_MODULE_PATH})
+PROJECT(ATen C CXX)
 
 if(${CMAKE_VERSION} VERSION_LESS "2.8.12")
   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
@@ -42,7 +43,11 @@ function(filter_list output input)
     set(${output} ${result} PARENT_SCOPE)
 endfunction()
 
-IF(NOT Torch_FOUND)
+FIND_PACKAGE(TH)
+FIND_PACKAGE(THS)
+FIND_PACKAGE(THNN)
+
+IF(NOT Torch_FOUND AND NOT TH_FOUND)
   FIND_PACKAGE(Torch REQUIRED)
 ENDIF()
 
@@ -50,15 +55,18 @@ IF(NOT TH_LIBRARIES)
   SET(TH_LIBRARIES "TH")
 ENDIF(NOT TH_LIBRARIES)
 MESSAGE(STATUS "TH_LIBRARIES: ${TH_LIBRARIES}")
+INCLUDE_DIRECTORIES(${TH_INCLUDE_DIR})
 
 IF(NOT THS_LIBRARIES)
   SET(THS_LIBRARIES "THS")
 ENDIF()
+INCLUDE_DIRECTORIES(${THS_INCLUDE_DIR})
 
 IF(NOT THNN_LIBRARIES)
   SET(THNN_LIBRARIES "THNN")
 ENDIF(NOT THNN_LIBRARIES)
 MESSAGE(STATUS "THNN_LIBRARIES: ${THNN_LIBRARIES}")
+INCLUDE_DIRECTORIES(${THNN_INCLUDE_DIR})
 
 IF ($ENV{TH_BINARY_BUILD})
   MESSAGE(STATUS "TH_BINARY_BUILD detected. Statically linking libstdc++")
@@ -78,20 +86,27 @@ ELSE()
   ADD_DEFINITIONS(-DAT_CUDA_ENABLED)
   INCLUDE_DIRECTORIES(${CUDA_INCLUDE_DIRS})
 
+  FIND_PACKAGE(THC)
+  FIND_PACKAGE(THCS)
+  FIND_PACKAGE(THCUNN)
+
   IF(NOT THC_LIBRARIES)
     SET(THC_LIBRARIES "THC")
   ENDIF(NOT THC_LIBRARIES)
   MESSAGE(STATUS "THC_LIBRARIES: ${THC_LIBRARIES}")
+  INCLUDE_DIRECTORIES(${THC_INCLUDE_DIR})
 
   IF(NOT THCS_LIBRARIES)
     SET(THCS_LIBRARIES "THCS")
   ENDIF(NOT THCS_LIBRARIES)
   MESSAGE(STATUS "THCS_LIBRARIES: ${THCS_LIBRARIES}")
+  INCLUDE_DIRECTORIES(${THCS_INCLUDE_DIR})
 
   IF(NOT THCUNN_LIBRARIES)
     SET(THCUNN_LIBRARIES "THCUNN")
   ENDIF(NOT THCUNN_LIBRARIES)
   MESSAGE(STATUS "THCUNN_LIBRARIES: ${THCUNN_LIBRARIES}")
+  INCLUDE_DIRECTORIES(${THCUNN_INCLUDE_DIR})
 ENDIF()
 
 # Can be compiled standalone
@@ -100,6 +115,7 @@ IF(NOT AT_INSTALL_BIN_DIR OR NOT AT_INSTALL_LIB_DIR OR NOT AT_INSTALL_INCLUDE_DI
   SET(AT_INSTALL_LIB_DIR "lib" CACHE PATH "AT install library subdirectory")
   SET(AT_INSTALL_INCLUDE_DIR "include" CACHE PATH "AT install include subdirectory")
   SET(AT_INSTALL_SHARE_DIR "share" CACHE PATH "AT install include subdirectory")
+  SET(AT_INSTALL_CMAKE_SUBDIR "share/cmake/ATen" CACHE PATH "AT install cmake subdirectory")
 ENDIF()
 
 FILE(GLOB base_h RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} "*.h")
@@ -180,6 +196,7 @@ IF(CUDA_FOUND)
 ENDIF()
 
 INSTALL(TARGETS ATen
+  EXPORT ATenTargets
   RUNTIME DESTINATION "${AT_INSTALL_BIN_DIR}"
   LIBRARY DESTINATION "${AT_INSTALL_LIB_DIR}"
   ARCHIVE DESTINATION "${AT_INSTALL_LIB_DIR}")
@@ -193,3 +210,10 @@ FOREACH(HEADER ${generated_h})
 ENDFOREACH()
 INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/ATen/Declarations.yaml
   DESTINATION ${AT_INSTALL_SHARE_DIR}/ATen)
+# Create ATenConfig.cmake
+EXPORT(TARGETS ATen FILE "${CMAKE_CURRENT_BINARY_DIR}/ATenTargets.cmake")
+EXPORT(PACKAGE ATen)
+SET(AT_INCLUDE_DIR "${CMAKE_INSTALL_PREFIX}/${AT_INSTALL_INCLUDE_SUBDIR}/ATen")
+CONFIGURE_FILE(ATenConfig.cmake.in "${PROJECT_BINARY_DIR}/ATenConfig.cmake")
+INSTALL(FILES "${PROJECT_BINARY_DIR}/ATenConfig.cmake" DESTINATION "${AT_INSTALL_CMAKE_SUBDIR}")
+INSTALL(EXPORT ATenTargets DESTINATION "${AT_INSTALL_CMAKE_SUBDIR}")

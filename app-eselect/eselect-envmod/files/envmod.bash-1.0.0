# -*-eselect-*-  vim: ft=eselect
# Copyright (c) 2005-2015 Gentoo Foundation
#
# This file is part of the 'eselect' tools framework.
#
# eselect is free software: you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation, either version 2 of the License, or (at your option) any later
# version.
#
# eselect is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# eselect.  If not, see <http://www.gnu.org/licenses/>.

ENV_D_PATH="${EROOT%/}/etc/env.d"
MAN_PATH="${EROOT%/}/usr/share/man/man1/"

MODULE_SET_CONFIG="${EROOT%/}/etc/env-mod.conf"
ENVIRONMENT_FILE="${ENV_D_PATH}/01modules"

for mod in ${BASH_SOURCE[@]##*/} ; do
	if [[ ${mod%.eselect} != ${mod} ]] ; then
		modulefile="${mod}"
		module="${mod%.eselect}"
		module="${module#envmod-}"
		module_names=( "${module}" )
	fi
done

match_module() {
	local tmp="$( echo "$1" | cut -d ' ' -f 1 )"
	if [[ ${tmp%/*} == ${2} ]] ; then
		return 0
	else
		return 1
	fi
}

find_versions() {
	local save_IFS=$IFS
	IFS=' '
	local search_list=( "$@" ) 
	local got=() found i
	IFS='\n'
	for (( i = 0; i < ${#search_list[@]}; ++i )) ; do
		local i avail="$(modulecmd bash avail ${search_list[$i]} --long 2>&1)"
		IFS=$'\n'
		for line in ${avail} ; do
			IFS=' '
			if match_module "${line}" "${search_list[$i]}"  ; then
				local info tmp2=( $(echo ${line} | perl -p -e "s/\s+/ /g") )
				if [[ ${tmp2[1]} == default ]] ; then
					info=( $(echo ${tmp2[0]} | tr '/' ' ') "default" )
				else
					info=( $(echo ${tmp2[0]} | tr '/' ' ') )
				fi
				found="no"
				for (( j = 0; j < ${#got[@]}; ++j )) ; do
					if [[ "${got[$j]}" == ${tmp2} ]] ; then
						found="yes"
					fi
				done
				if [[ $found == no ]] ; then
					echo "${info[@]}"
					got+=( "${tmp2}" )
				fi
			fi
		done
	done
	IFS=$save_IFS
	return 0
}

find_targets() {
	local save_IFS=$IFS
	IFS=$'\n'
	readarray -t versions <<<"$(find_versions ${module_names[@]})"
	{
		for v in ${versions[@]}; do
			IFS=' '
			tmp=( $v )
			if [ -z "${tmp[1]}" ] ; then
				echo "${tmp[0]}"
			else
				echo "${tmp[0]}/${tmp[1]}"
				if [[ ${tmp[2]} == default ]] ; then
					echo "${tmp[0]}/default"
				fi
			fi
		done
	} | tr '\n' ' '
	IFS=$save_IFS
}

loaded_module() {
	if [[ $match_type == fuzzy ]] ; then
		echo "$(modulecmd bash -t list 2>&1 | grep ${module} | tr '/' ' ')"
	else
		local loaded_modules=( $(modulecmd bash -t list 2>&1 | tr '\n' ' ') ) m l
		for m in ${module_names[@]} ; do
			for l in ${loaded_modules} ; do
				[[ ${m} == ${l%/*} ]] && echo "${l}"
			done
		done
	fi
}

module_is_loaded() {
	if [ -z "$(echo "$(modulecmd bash -t list 2>&1 | grep $1 | tr '/' ' ')")" ]; then return 1; else return 0; fi;
}

has_conflict() {
	local conflicts=()
	local save_IFS=$IFS
	IFS=$'\n'
	conflicts=( $( modulecmd bash show $2 2>&1 | grep conflict | tr -s ' ' | cut -d ' ' -f2 ) )
	if has "${1%/*}" "${conflicts[@]%/*}" ; then return 1; else return 0; fi
	IFS=$save_IFS
}

generate_env() {
	local line conf=() loads=() unloads=() last_pri="00"
	local defaults=() module_script
	ENVIRONMENT_TEMP="$(mktemp)"
	ENVIRONMENT_TEMP2="$(mktemp)"
	touch "$ENVIRONMENT_TEMP"
	local save_IFS=$IFS
	count=0
	IFS=$'\n'
	for line in $( cat ${MODULE_SET_CONFIG} | sort ) ; do
		IFS=' '
		conf=( $line )
		[ -z "${last_pri}" ] && last_pri=${conf[0]}
		if [[ ${conf[0]} != ${last_pri} ]] ; then
			module_script=". /opt/modules/default/init/bash && . ${ENVIRONMENT_TEMP} && "
			if [[ ${#unloads} > 0 ]] ; then
				module_script+="module unload ${unloads[@]}; "
			fi
			if [[ ${#loads} > 0 ]] ; then
				module_script+="module load ${loads[@]}; "
			fi
			env -i HOME=$HOME MODULEPATH=$MODULEPATH PATH="/usr/bin:/bin" bash -c "$module_script export" > "${ENVIRONMENT_TEMP2}"
			ENVIRONMENT_TEMP_tmp="$ENVIRONMENT_TEMP"
			ENVIRONMENT_TEMP="$ENVIRONMENT_TEMP2"
			ENVIRONMENT_TEMP2="$ENVIRONMENT_TEMP_tmp"
			((count++))
			#cp $ENVIRONMENT_TEMP "$ENVIRONMENT_TEMP.$count"
			loads=()
			unloads=()
		fi
		if [[ ${conf[2]} == load ]] ; then
			# 0: priority
			# 1: eselect module name
			# 2: "load"
			# 3: environment module name
			# 4: version
			
			IFS=$'\n'
			conflicts=$( modulecmd bash show ${conf[3]} 2>&1 | grep conflict | tr -s ' ' | cut -d ' ' -f2 )
			loaded_list=( $(env -i bash -c ". $ENVIRONMENT_TEMP; . /opt/modules/default/init/bash; module list -t 2>&1 | /usr/bin/sed '/\(Currently Loaded\|No Modulefiles Currently Loaded.\)/d'") )
			for c in "${conflicts[@]%/*}" ; do
				if has "${c}" "${loaded_list[@]%/*}" ; then
					unloads+=( "${c}" )
				fi
			done
			if [[ ${conf[4]} == default ]] ; then
				loads+=( "${conf[3]}" )
			else
				loads+=( "${conf[3]}/${conf[4]}" )
			fi
		elif [[ ${conf[2]} == unload ]] ; then
			# 0: priority
			# 1: eselect module name
			# 2: "unload"
			# 3: environment module name
			unloads+=( ${conf[3]} )
		fi
		last_pri="${conf[0]}"
	done
	module_script=". $ENVIRONMENT_TEMP; . /opt/modules/default/init/bash; "
	if [[ ${#unloads} > 0 ]] ; then
		module_script+="module unload ${unloads[@]}; "
	fi
	if [[ ${#loads} > 0 ]] ; then
		module_script+="module load ${loads[@]}; "
	fi
	env -i HOME=$HOME USING_ESELECT_ENVMOD="yes" MODULEPATH=$MODULEPATH PATH="/usr/bin:/bin" bash -c "$module_script export | /usr/bin/sed 's/declare -[xriaf]\+ //g' | /usr/bin/perl -ne 'print if m/^[a-z0-9_]+=[^\$\(]/i' | /usr/bin/sed '/^\(_\|BASH_EXECUTION_STRING\|EUID\|HOME\|HOSTNAME\|IFS\|PPID\|PWD\|SHELL\|SHELLOPTS\|SHLVL\|TERM\|UID\|BASHOPTS\)=/d'" > "${ENVIRONMENT_FILE}"
	LDP_LDFLAGS=""
 	LD_LIB_PATHS=( $(echo $LD_LIBRARY_PATH | tr ':' ' ') )
 	for path in ${LD_LIB_PATHS[@]} ; do
 		LDP_LDFLAGS="$LDP_LDFLAGS -Wl,--rpath=$path"
 	done
	echo "LDP_LDFLAGS=\"$LDP_LDFLAGS\"" >> "${ENVIRONMENT_FILE}"
	rm ${ENVIRONMENT_TEMP}
	IFS=$save_IFS
}

# module_writeconfig [eselect_module] [environment_module] [order] [load|unload] [version] 
module_writeconfig() {
	local eselect_module="${1:-${module}}"
	local environment_modules=( ${2:-${module_names[0]}} )
	local order="${3:-50}"
	local action="${4:-set}"
	local version="${5:-default}"
	local save_IFS=$IFS
	local oldconfig="$( cat ${MODULE_SET_CONFIG} )"
	
	echo "${order} ${eselect_module} unload ${environment_module}"
	{
		IFS=$'\n'
		for i in $oldconfig ; do
			IFS=' '
			conf=( $i )
			if [[ ${conf[1]} != ${eselect_module} ]] && [[ ! -z "$i" ]] ; then
				echo "$i"
			fi
		done
		if [[ ${action} == load ]] ; then
			echo "${order} ${eselect_module} load ${environment_modules[0]} ${version}" 
		elif [[ ${action} == unload ]] ; then
			for environment_module in ${environment_modules[@]} ; do
				echo "${order} ${eselect_module} unload ${environment_module}"
			done
		fi
	} | sort > ${MODULE_SET_CONFIG}
	IFS=$save_IFS
}

# module_setunset target
module_set() {
	local target="${1}" priority="${2:-50}" targets=() oldconfig pos version versions tmp t curr package
	local save_IFS=$IFS
	targets=( $(find_targets) )
	if is_number "${target}" && [[ ${target} -ge 1 ]]; then
		pos=$((${target} - 1))
		IFS='/'
		curr=( ${targets[$pos]} )
		version="${curr[1]}"
		if [ -z "$version" ] ; then
			target="${curr[0]}"
			version="default"
		else
			target="${curr[0]}/${curr[1]}"
		fi
		full_module="${curr[0]}"
	elif [[ $target == default ]] && [[ $match_type == exact ]] ; then
		version="default"
		full_module="${module}"
		target="${module}/default"
	else
		version="${target##*/}"
		full_module="${target%/*}"
	fi
	IFS=$save_IFS

	if ! has "${target}" "${targets[@]}" && [[ ${target} != */default ]] ; then
		die -q "Invalid target ${target}"
	fi

	module_writeconfig ${module} ${full_module} ${priority} "load" ${version}
	generate_env
}

module_unset() {
	local i target targets full_modules=()
	targets=( $(find_targets) )
	priority="${1:-50}"
	for i in ${targets[@]%/*} ; do
		if ! has "${i}" "${full_modules[@]}" ; then
			full_modules+=( ${i} )
		fi
	done
	module_writeconfig ${module} "${full_modules[@]}" ${priority} "unload"
	generate_env
}

module_list() {
	local i conf v using active default versions targets=() counter=0 defaults=()
	local save_IFS=$IFS
	mkdir -p ${MODULE_SET_CONFIG%/selected}
	IFS=$'\n'
	readarray -t versions <<<"$(find_versions ${module_names[@]})"
	if [ -f "${MODULE_SET_CONFIG}" ] ; then
		for i in $(cat "${MODULE_SET_CONFIG}") ; do
			IFS=' '
			conf=( $i )
			if [[ ${conf[1]} == ${module} ]] ; then
				if [ -z "${conf[4]}" ] ; then
					using="${conf[3]}"
				else
					using="${conf[3]}/${conf[4]}"
				fi
			fi
		done
	fi
	if [[ ${#versions} > 0 ]] ; then
		for (( i = 0; i < ${#versions[@]}; i++)) ; do
			IFS=' '
			info=( ${versions[$i]} )
			if [[ ${info[1]} == default ]] || [[ ${info[2]} == default ]] ; then
				if [ -z "${info[1]}" ] ; then
					targets+=( "${info[0]} (default)" )
					defaults+=( "${info[0]}" )
					if [[ $using == ${info[0]}/default ]] ; then
						active="${info[0]}"
					elif [[ $using == ${info[0]} ]] ; then
						active="${info[0]}"
					fi
				else
					targets+=( "${info[0]}/${info[1]} (default)" )
					defaults+=( "${info[0]}/default" )
					if [[ $using == ${info[0]}/default ]] ; then
						active="${info[0]}/${info[1]}"
					elif [[ $using == ${info[0]}/${info[1]} ]] ; then
						active="${info[0]}/${info[1]}"
					fi
				fi
			else
				if [ -z "${info[1]}" ] ; then
					targets+=( "${info[0]}" )
				else
					targets+=( "${info[0]}/${info[1]}" )
				fi
			fi
			if [ -z "${info[1]}" ] ; then
				if [[ $using == ${info[0]}/default ]] ; then
					active="${info[0]}"
				fi
			else
				if [[ $using == ${info[0]}/${info[1]} ]] ; then
					active="${info[0]}/${info[1]}"
				fi
			fi
		done
		for (( i = 0; i < ${#targets[@]}; i++ )); do
			if [[ ${targets[${i}]% (default)} == ${active} ]] ; then
				targets[${i}]=$(highlight_marker "${targets[${i}]}")
			fi
		done
	fi
	write_numbered_list -m "(none found)" "${targets[@]}"
	IFS=$save_IFS
}

describe_update() {
	echo "Regenerate environment"
}

do_update() {
	generate_env
}


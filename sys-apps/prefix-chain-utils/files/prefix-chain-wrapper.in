#!/usr/bin/env bash

link_dirs=()
include_dirs=()
libs=()
opts=()
rpaths=()
chost="@GENTOO_PORTAGE_CHOST@"
prefix="@GENTOO_PORTAGE_EPREFIX@"
absprefix=${prefix}
if [[ ${CHOST} == *"-winnt"* ]]; then
    # we may get called from windows binary, like pkgdata in dev-libs/icu
    # in this case, PATH elements get the "/dev/fs/C/WINDOWS/SUA" prefix
    absprefix=$(winpath2unix "$(unixpath2win "${absprefix}")")
fi
mode=link
orig_args=("$@")
o_opt=""

for ((i = 1; i <= $#; ++i)) do
 opt="${orig_args[$i]}"
 case "$opt" in
  -L)	((++i)); link_dirs=("${link_dirs[@]}" "-L${orig_args[$i]}") ;;
  -L*)	link_dirs=("${link_dirs[@]}" "${opt}") ;;
  -l*)  libs=("${libs[@]}" "${opt}") ;;
  -Wl,--rpath=*) rpaths=("${rpaths[@]}" "${opt#-Wl,--rpath=}") ;;
  -Wl,-rpath,*) rpaths=("${rpaths[@]}" "${opt#-Wl,-rpath,}") ;;
  -Wl,-R,*) rpaths=("${rpaths[@]}" "${opt#-Wl,-R,*}") ;;
  -I)   ((++i)); include_dirs=("${include_dirs[@]}" "-I${orig_args[$i]}") ;;
  -I*)  include_dirs=("${include_dirs[@]}" "${opt}") ;;
  -o)   ((++i)); o_opt="-o ${orig_args[$i]}" ;;
  -o*)  o_opt="${opt}" ;;
  *)
  	case "${opt}" in
	-v)	
		# -v done right: only use mode version if -v is the _only_
		# argument on the command line.
		[[ ${#orig_args[@]} -gt 1 ]] || mode=version
		;;
	--version)	mode=version ;;
	-c|-E|-S)	mode=compile ;;
	-print-search-dirs) mode=dirs ;;
	esac
  	opts=("${opts[@]}" "${opt}")
	;;
 esac
done

save_ifs=$IFS
IFS=':'
new_path=
for p in $PATH; do
 IFS=$save_ifs
 [[ "${p#${absprefix}}" != "${p}" ]] && continue
 if [[ -z "${new_path}" ]]; then
  new_path="${p}"
 else
  new_path="${new_path}:${p}"
 fi
done
IFS=$save_ifs

PATH=${new_path}

# toolchain-prefix-wrapper's ld-wrapper understands '-R' for aix and hpux too.
# parity (winnt) understands -rpath only ...
case "${chost}" in
*-winnt*) rpath_opt="-Wl,-rpath," ;;
*) rpath_opt="-Wl,-R," ;;
esac

pfx_link=("-L${prefix}/usr/lib" "-L${prefix}/lib")
pfx_link_r=("${rpath_opt}${prefix}/lib" "${rpath_opt}${prefix}/usr/lib")
for rp in ${link_dirs[@]} ; do
  #found=""
  #for rp2 in ${rpaths[@]} ; do
  #  if [[ $rp == $rp2 ]] ; then
  #    found="yes"
  #  fi
  #done
  #[ -z "${found}" ] &&
  pfx_link_r+=( "${rpath_opt}${rp}" )
done
for rp in ${rpaths[@]} ; do
  pfx_link_r+=( "${rpath_opt}${rp}" )
done
pfx_comp=("-I${prefix}/usr/include")

ex="$(basename $0)"
case "$mode" in
link)      exec ${ex##$chost-} ${link_dirs[@]} ${pfx_link[@]} ${opts[@]} ${pfx_comp[@]} ${libs[@]} $o_opt ${pfx_link_r[@]} ;;
compile)	exec ${ex##$chost-} ${link_dirs[@]} ${opts[@]} ${pfx_comp[@]} ${o_opt} ;;
version)	exec ${ex##$chost-} ${orig_args[@]} ;;
dirs)
	${ex#$chost-} ${orig_args[@]} | while read line; do
		if [[ "${line}" == "libraries: ="* ]]; then
			echo "libraries: =${prefix}/usr/lib:${prefix}/lib:${line#"libraries: ="}"
		else
			echo "${line}"
		fi
	done
	;;
*)			echo "cannot infer $0's mode from comamnd line arguments"; exit 1 ;;
esac

